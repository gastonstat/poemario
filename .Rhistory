# skip lines of code chunk
if (is_code_chunk(hw[i])) {
#i <- i + 1
within_chunk <- TRUE
while (within_chunk) {
i <- i + 1
print(hw[i])
within_chunk <- !is_code_chunk(hw[i])
#i <- i + 1
}
#i <- i - 1
}
}
i <- i + 1
}
}
}
hw <- 'lab03'
setwd(paste0('~/Dropbox/course_introstat/labs-spring-2019/', hw))
hw_file = 'lab03a-spreads-normal'
Rmd_file = paste0(hw_file, '.Rmd')
questions_file <- paste0(hw_file, '-questions.Rmd')
solutions_file <- paste0(hw_file, '-solutions.Rmd')
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
hw_file = 'lab03b-scatterplots'
Rmd_file = paste0(hw_file, '.Rmd')
questions_file <- paste0(hw_file, '-questions.Rmd')
solutions_file <- paste0(hw_file, '-solutions.Rmd')
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
hw <- 'lab04'
setwd(paste0('~/Dropbox/course_introstat/labs-spring-2019/', hw))
hw_file = 'lab04a-correlation'
Rmd_file = paste0(hw_file, '.Rmd')
questions_file <- paste0(hw_file, '-questions.Rmd')
solutions_file <- paste0(hw_file, '-solutions.Rmd')
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
hw <- 'lab04'
setwd(paste0('~/Dropbox/course_introstat/labs-spring-2019/', hw))
hw_file = 'lab04b-more-correlation'
Rmd_file = paste0(hw_file, '.Rmd')
questions_file <- paste0(hw_file, '-questions.Rmd')
solutions_file <- paste0(hw_file, '-solutions.Rmd')
render_hw(Rmd_file, solutions = FALSE)
render(questions_file, c("pdf_document"))
render_hw(Rmd_file, solutions = TRUE)
render(solutions_file, c("pdf_document"))
summary(nba)
ls()
rm(list = ls())
rm(list = ls())
setwd("~/Dropbox/course_stat133/stat133-labs/2019-spring")
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
dim(abalone)
head(abalone)
summary(abalone$V1)
three_rows <- abalone[1:3, ]
three_rows
summary(abalone)
?transform
ls()
abalone
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diam')]
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole"
"Shucked",
"Viscera",
"Shell",
"Rings")
abalone <- read.table("abalone.data", sep = ",", col.names = column_names)
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole"
"Shucked",
"Viscera",
"Shell",
"Rings")
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole"
"Shucked",
"Viscera",
"Shell",
"Rings")
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole"
"Shucked",
"Viscera",
"Shell",
"Rings")
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole"
"Shucked",
"Viscera",
"Shell",
"Rings")
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole",
"Shucked",
"Viscera",
"Shell",
"Rings")
abalone <- read.table("abalone.data", sep = ",", col.names = column_names)
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(origin, sep = ",", col.names = column_names)
head(abalone)
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diam')]
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$Ht_Len <- abies$Height / abies$Length
head(abies)
dim(abies)
sort(abies$Length)
abies2 <- abies[order(abies$Length, decreasing = TRUE), ]
head(abies)
head(abies)
head(abies2)
summary(abalone)
500.43 + 390.40 + 136.19 + 27.27
9000 + 1500
204.51 - 17.7
10.95 + 32.76
452 + 171 + 600
3500 - 1650
9000 / 19
9000 * 19
190000 / 19.2
github <- 'https://github.com/ucb-stat133/stat133-hws/'
repo <- 'raw/master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
datafile
rm(list = ls())
dd = read.csv('https://github.com/ucb-stat133/stat133-hws/raw/master/data/nba2018-players.csv')
head(dd)
452 + 171 + 600
rm(list = ls())
returns = c(26.46, 15.06, 2.11, 16.00, 32.39, 13.69, 1.38, 11.96, 21.83, -4.38)
mean(returns)
x = c(11.96, 21.83, -4.38)
mean(x)
x_mean = mean(x)
x_sd = 11.18
x_mean
x_sd
sd(returns)
hist(returns)
setwd("~/Dropbox/course_introstat/introstat-spring-2019/data")
dat = read.csv('sp500_returns.csv')
head(dat)
mean(dat$return)
sd(dat$return)
hist(dat$return)
boxplot(dat$return)
median(dat$return)
dat$su = (dat$return - mean(dat$return)) / sd(dat$return)
head(dat)
hist(dat$su)
hist(dat$su, col = 'gray80')
hist(dat$su, col = 'gray80', xlim = c(-3, 3))
hist(dat$su, col = 'gray80', xlim = c(-3, 3), breaks = 10)
hist(dat$su, col = 'gray80', xlim = c(-3, 3), breaks = 7)
hist(dat$su, col = 'gray80', xlim = c(-3, 3), breaks = 8)
hist(dat$su, col = 'gray80', xlim = c(-3, 3), breaks = 5)
hist(dat$su, col = 'gray80', xlim = c(-3, 3), breaks = 5, las = 1)
hist(dat$return, col = 'gray80', xlim = c(-3, 3), breaks = 5, las = 1)
hist(dat$su, col = 'gray80', breaks = 5, las = 1)
hist(dat$return, col = 'gray80', breaks = 5, las = 1)
hist(dat$return, col = 'gray80', breaks = 7, las = 1)
mean(dat$return)
sd(dat$return)
sd(dat$return[1:10])
sd(dat$return[1:9])
sd(dat$return[1:15])
sd(dat$return[1:14])
plot(year, return, data = dat)
plot(dat$year, dat$return)
plot(dat$year, dat$return, type = "l'")
plot(dat$year, dat$return, type = "l")
plot(dat$year, dat$return, type = "l")
abline(h = mean(dat$return))
abline(h = (sd(dat$return), -sd(dat$return)), col = 'red')
abline(h = c(sd(dat$return), -sd(dat$return)), col = 'red')
knitr::opts_chunk$set(echo = TRUE)
summary(dat$return)
hist(dat$return, col = 'gray80', breaks = 5, las = 1)
hist(dat$return, col = 'gray80', breaks = 8, las = 1)
hist(dat$su, col = 'gray90', xlim = c(-3, 3), breaks = 5, las = 1)
plot(dat$year, dat$return, type = "l")
plot(dat$year, dat$return, type = "l", las = 1)
abline(h = c(x_mean - x_sd, x_mean + x_sd), col = 'red')
plot(dat$year, dat$return, type = "l", las = 1)
abline(h = x_mean, col = 'blue')
abline(h = c(x_mean - x_sd, x_mean + x_sd), col = 'red')
plot(dat$year, dat$return, type = "l", las = 1)
abline(h = x_mean, col = 'blue')
abline(h = c(x_mean - x_sd, x_mean + x_sd), col = 'red')
abline(h = c(x_mean - 2*x_sd, x_mean + 2*x_sd), col = 'orange')
plot(dat$year, dat$return, type = "l", las = 1, ylim = c(-60, 60))
abline(h = x_mean, col = 'blue')
abline(h = c(x_mean - x_sd, x_mean + x_sd), col = 'red')
abline(h = c(x_mean - 2*x_sd, x_mean + 2*x_sd), col = 'orange')
abline(h = c(x_mean - 3*x_sd, x_mean + 3*x_sd), col = 'purple')
plot(dat$year, dat$return, type = "l", las = 1, ylim = c(-60, 60))
abline(h = x_mean, col = 'blue')
abline(h = c(x_mean - x_sd, x_mean + x_sd), col = 'red')
abline(h = c(x_mean - 2*x_sd, x_mean + 2*x_sd), col = 'orange')
abline(h = c(x_mean - 3*x_sd, x_mean + 3*x_sd), col = 'orange', lty = 2)
rm(list = ls())
setwd("~/Dropbox/course_introstat/introstat-spring-2019/demos")
dat <- read.csv('../data/sp500_returns.csv')
dat
runApp('~/Dropbox/course_introstat/introstat-fall-2018/apps/01-histograms')
setwd("~/Dropbox/course_introstat/introstat-fall-2018/apps/01-histograms")
# data set
nba <- read.csv('../../data/nba_players.csv', header = TRUE)
sd(nba$height)
runApp()
79 - 3.48
79 + 3.48
79 + 2* 3.48
?pnorm
runApp()
pnorm(81, mean = 79, sd = 3.48, lower.tail = FALSE)
ls()
head(nba[ ,1:4])
sum(nba$height >= 81)
sum(nba$height >= 81) / nrow(nba)
sd(nba$height)
mean(nba$height)
pnorm(81, mean = 79, sd = 3.48, lower.tail = FALSE)
pnorm(81, mean = 78.9, sd = 3.48, lower.tail = FALSE)
runApp()
summary(nba$weight)
sd(nba$weight)
pnorm(260, mean = 220, sd = 26.83, lower.tail = FALSE)
sum(nba$weight >= 260) / nrow(nba)
sum(nba$weight > 260) / nrow(nba)
qnorm(p = 0.4, mean = 220, sd = sd(nba$weight))
sum(nba$weight < 213.2) / nrow(nba)
sum(nba$weight <= 213.2) / nrow(nba)
sum(nba$weight > 260) / nrow(nba)
pnorm(260, mean = 220, sd = 26.83, lower.tail = FALSE)
dat <- read.csv('../data/sp500_returns.csv')
summary(dat$return)
# mean
x_mean <- mean(dat$return)
x_mean
# sd
x_sd <- sd(dat$return)
x_sd
hist(dat$return, col = 'gray90', breaks = 8, las = 1)
rm(list = ls())
?read.csv
read.table
?file
scan
scan
35/78
1 - 35/78
10 / 78
setwd("~/Dropbox/course_stat133/labs/lab-solutions-spring2019")
setwd('~')
?readRDS
github <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-hws/'
repo <- 'master/data/nba2018-players.csv'
datafile <- paste0(github, repo)
datafile
A = 1:5
A
typeof(A)
B = rnorm(5)
B
typeof(B)
C = letters[1:5]
C
typeof(C)
mode(A)
mode(B)
mode(C)
class(A)
class(B)
class(C)
?typeof
typeof(read.table)
class(read.table)
dat = data.frame(A = A, B=B, C=C)
dat
class(dat)
typeof(dat)
mode(dat)
ls()
g = gl(3, 5)
g
g = gl(3, 5, labels = c('usa', 'can', 'chi'))
g
model.matrix(g)
model.matrix(rrep(1:5, 3))
model.matrix(rep(1:5, 3))
?model.matrix
model.matrix(data.frame(g))
g
data.frame(g)
model.matrix(~ data.frame(g))
dd = data.frame(g)
model.matrix(~ g, data = dd)
g
dd = data.frame(g)
dd
model.matrix(~ g, data = dd)
model.matrix(~ g - 1, data = dd)
14600 * 30
TRUE + TRUE
1 + TRUE
1 + !TRUE
1 + FALSE
1 + )
1 + 0
1 + !TRUE
!TRUE + 1
!TRUE
as.integer(FALSE)
as.numeric(FALSE)
as.logical(1)
as.logical(2)
as.logical(3)
as.logical(0)
!TRUE + 1
FALSE + TRUE
FALSE + 1
!2
!(TRUE + 1)
1 + !TRUE
!TRUE + 1
"-2" > 0
as.numeric("-2")
as.numeric("-2") > 0
-2 > 0
'kjldshfgkl'
'kjldshfgkl"
'
c(1,2) %in% c(1, 3, 5, 6)
16 / 7
15 / 7
14 / 7
column_names <- c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole",
"Shucked",
"Viscera",
"Shell",
"Rings")
column_types <- c(
'factor',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'integer'
)
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
abalone <- read.table(
origin,
sep = ",",
col.names = column_names,
colClasses = column_types)
# check its structure again
str(abalone, vec.len = 1)
# plot of a factor
plot(abalone$sex)
# plot of a factor
plot(abalone$sex)
# plot of a factor
plot(abalone$Sex)
summary(abalone)
table(abalone$Rings)
abalone[abalone$Rings >= 20]
abalone[abalone$Rings >= 20, ]
abalone[abalone$Rings >= 25, ]
abalone[abalone$Rings >= 25, c('Sex', 'Rings')]
# create a data frame `male-female` by filtering the data
# with Male and Female abalones.
male_femlae <- abalone[abalone$Sex != "Infant", ]
dim(male_female)
# create a data frame `male-female` by filtering the data
# with Male and Female abalones.
male_female <- abalone[abalone$Sex != "Infant", ]
dim(male_female)
# create a data frame `infant` by filtering the data about
# Infant abalones, and display its dimensions with `dim()`
male_female <- abalone[abalone$Sex == "Infant", ]
# create a data frame `infant` by filtering the data about
# Infant abalones, and display its dimensions with `dim()`
infant <- abalone[abalone$Sex == "Infant", ]
dim(infant)
# create a data frame `infant` by filtering the data about
# Infant abalones, and display its dimensions with `dim()`
infant <- abalone[abalone$Sex == "I", ]
dim(infant)
# create a data frame `male-female` by filtering the data
# with Male and Female abalones.
male_female <- abalone[abalone$Sex != "I", ]
dim(male_female)
# create a data frame `height14` by filtering the data with those abalones with
# Height less than 0.14, and display its dimensions with `dim()`
height14 <- abalone[abalone$Height < 0.14, ]
dim(height14)
(nrow(abalone)-5):nrow(abalone)
abalone[(nrow(abalone)-4):nrow(abalone), ]
# slice the data by selecting the first 5 rows
abalone[1:5, ]
# slice the data by selecting rows 5, 10, 15, 20, 25, ..., 50.
abalone[seq(5, 50, by 50), ]
# slice the data by selecting rows 5, 10, 15, 20, 25, ..., 50.
abalone[seq(5, 50, by = 50), ]
# slice the data by selecting rows 5, 10, 15, 20, 25, ..., 50.
abalone[seq(5, 50, by = 5), ]
summary(abalone)
table(abalone$Rings)
abalone[abalone$Rings <= 3,]
# filter the data with those abalones with more than 25 Rings,
# displaying only their Sex, and Rings
abalone[abalone$Sex == "I" & abalone$Rings > 3 & abalone$Rings < 6, c('Sex', 'Rings')]
# filter the data with those abalones with more than 25 Rings,
# displaying only their Sex, and Rings
aux <- (abalone$Sex == "I" & abalone$Rings > 3 & abalone$Rings < 6)
abalone[aux, c('Sex', 'Rings', 'Diameter')]
abies <- abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies
plot(abalone$Height)
#
plot(abalone$Height, abalone$Length)
# data frame with more than two numeric vectors
plot(abalone[ ,c('Height', 'Length', 'Diameter'])
# data frame with more than two numeric vectors
plot(abalone[ ,c('Height', 'Length', 'Diameter')])
# data frame with two numeric vectors
plot(abalone[ ,c('Height', 'Length')])
# data frame with two numeric vectors
plot(abalone[ ,c('Sex', 'Length')])
# a data frame with one factor and one numeric vector
plot(abalone[ ,c('Length', 'Sex')])
plot(abalone$Height, abalone$Length,
col = 'blue', pch = 19, 'cex = 0.9')
plot(abalone$Height, abalone$Length,
col = 'blue', pch = 19, cex = 0.9)
?plot
?par
?plot
?read.table
rm(list = ls())
setwd("~/Dropbox/poemario")
build_bookdown_yml <- function(poems) {
infile <- '_bookdown.yml'
cat('rmd_files: [\n', file = infile)
cat('  "index.Rmd",\n', sep = '', file = infile, append = TRUE)
# start unordered list
minus_last <- length(poems) - 1
for (poem in poems[1:minus_last]) {
cat('  "', poem, '",\n', sep = '', file = infile, append = TRUE)
}
# last poem
cat('  "', poems[length(poems)], '"\n', sep = '', file = infile, append = TRUE)
cat(']', file = infile, append = TRUE)
}
all_files <- dir()
poems <- grep('*.Rmd', all_files, value = TRUE)
poems <- poems[!grepl("index.Rmd", poems)]
build_bookdown_yml(poems)
